from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from loader import dp, bot
from app.keyboards import cancel_kb, gender_kb, find_gender_kb
from database.service.users import create_profile
from .start import _start_command
from app.states import ProfileStatesGroup


@dp.message_handler(text="üîÑ")
async def _retry_create_profile_command(message: types.Message):
    await _create_profile_command(message)


# create profile
@dp.message_handler(Command("create"))
async def _create_profile_command(message: types.Message):
    await message.answer(("–í—ã–±–µ—Ä–µ—Ç–µ —Å–≤–æ–π –ø–æ–ª:"), reply_markup=gender_kb())
    await ProfileStatesGroup.gender.set()


# gender
@dp.message_handler(lambda message: message.text != "–Ø –ø–∞—Ä–µ–Ω—å" and message.text != "–Ø –¥–µ–≤—É—à–∫–∞",
    state=ProfileStatesGroup.gender)
async def _gender_filter(message: types.Message):
    await message.answer(("–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –∏–ª–∏ –Ω–∞–ø–∏—á–∞—Ç–∞–π—Ç–µ –ø–∞—Ä–≤–∏–ª—å–Ω–æ."))


@dp.message_handler(state=ProfileStatesGroup.gender)
async def _gender(message: types.Message, state: FSMContext):
    if message.text == '–Ø –ø–∞—Ä–µ–Ω—å':
        gender = 'male'
    elif message.text == '–Ø –¥–µ–≤—É—à–∫–∞':
        gender = 'female'

    async with state.proxy() as data:
        data["gender"] = gender
        await message.reply(("–ö—Ç–æ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω"), reply_markup=find_gender_kb())

    await ProfileStatesGroup.find_gender.set()


# gender of interest
@dp.message_handler(lambda message: message.text != "–ü–∞—Ä–Ω–∏" and message.text != "–î–µ–≤—É—à–∫–∏" and message.text != "–í—Å–µ",
    state=ProfileStatesGroup.find_gender)
async def _find_gender_filter(message: types.Message):
    await message.answer(text=("–ù–µ –∫–æ—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –í—ã–±–µ—Ä–µ—Ç–µ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, –∏–ª–∏ –Ω–∞–ø–∏—á–∞—Ç–∞–π—Ç–µ –ø–∞—Ä–≤–∏–ª—å–Ω–æ."))


@dp.message_handler(state=ProfileStatesGroup.find_gender)
async def _find_gender(message: types.Message, state: FSMContext):
    del_markup = types.ReplyKeyboardRemove()
    async with state.proxy() as data:
        data["find_gender"] = message.text

        await message.reply(text=("–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ!"), reply_markup=del_markup)
    await ProfileStatesGroup.next()


# photo
@dp.message_handler(lambda message: not message.photo,
    state=ProfileStatesGroup.photo)
async def _photo_filter(message: types.Message):
    await message.answer(("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!"))


@dp.message_handler(content_types=["photo"], state=ProfileStatesGroup.photo)
async def _photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.photo[0].file_id
    await message.reply(("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"))
    await ProfileStatesGroup.next()


# name
@dp.message_handler(lambda message: len(message.text) > 70,
    state=ProfileStatesGroup.name)
async def _name_filter(message: types.Message):
    await message.answer(("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤."))


@dp.message_handler(state=ProfileStatesGroup.name)
async def _name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text

    await message.reply(("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?"))
    await ProfileStatesGroup.next()


# age
@dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) > 100,
    state=ProfileStatesGroup.age)
async def _age_filter(message: types.Message):
    if message.text != 100:
        await message.answer(("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏."))
    elif float(message.text) > 100:
        await message.answer(("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –º–µ—Ä—Ç–≤—ã, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤."))


@dp.message_handler(state=ProfileStatesGroup.age)
async def _age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["age"] = message.text

        await message.reply(("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥."))
        await ProfileStatesGroup.next()


# city
@dp.message_handler(lambda message: len(message.text) > 70, 
    state=ProfileStatesGroup.city,)
async def _city_filter(message: types.Message):
    await message.answer(("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤."))


@dp.message_handler(state=ProfileStatesGroup.city)
async def _city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["city"] = message.text

    await message.reply(("–†–∞—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ."))
    await ProfileStatesGroup.next()


# description
@dp.message_handler(lambda message: len(message.text) > 250, 
    state=ProfileStatesGroup.desc)
async def _decription_filter(message: types.Message):
    await message.answer(("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤."))


@dp.message_handler(state=ProfileStatesGroup.desc)
async def _decription(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data["desc"] = message.text
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=data["photo"],
            caption=f'{data["name"]}, {data["age"]} | –ì–æ—Ä–æ–¥: {data["city"]}\n{data["desc"]}',
        )
    await ProfileStatesGroup.next()
    await create_profile(state, user_id=message.from_user.id)
    await _start_command(message)
