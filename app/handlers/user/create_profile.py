from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command

from loader import dp, bot

from database.service.profile import create_profile

from utils.cordinate import get_coordinates

from app.keyboards.default import cancel_kb, gender_kb, find_gender_kb
from app.states import ProfileStatesGroup
from .start import _start_command


@dp.message_handler(text="üîÑ")
async def _retry_create_profile_command(message: types.Message):
    await _create_profile_command(message)


# create profile
@dp.message_handler(Command("create"))
async def _create_profile_command(message: types.Message):
    await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_kb())
    await ProfileStatesGroup.gender.set()


# gender
@dp.message_handler(lambda message: message.text != "–Ø –ø–∞—Ä–µ–Ω—å" and message.text != "–Ø –¥–µ–≤—É—à–∫–∞",
    state=ProfileStatesGroup.gender)
async def _gender_filter(message: types.Message):
    await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. üìù")


@dp.message_handler(state=ProfileStatesGroup.gender)
async def _gender(message: types.Message, state: FSMContext):
    if message.text == '–Ø –ø–∞—Ä–µ–Ω—å':
        gender = 'male'
    elif message.text == '–Ø –¥–µ–≤—É—à–∫–∞':
        gender = 'female'

    async with state.proxy() as data:
        data["gender"] = gender
        await message.reply("–ö—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω? –í—ã–±–µ—Ä–∏ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞: üë§", reply_markup=find_gender_kb())

    await ProfileStatesGroup.find_gender.set()


# gender of interest
@dp.message_handler(lambda message: message.text != "–ü–∞—Ä–Ω–∏" and message.text != "–î–µ–≤—É—à–∫–∏" and message.text != "–í—Å–µ",
    state=ProfileStatesGroup.find_gender)
async def _find_gender_filter(message: types.Message):
    await message.answer(text=("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ. üìù"))


@dp.message_handler(state=ProfileStatesGroup.find_gender)
async def _find_gender(message: types.Message, state: FSMContext):
    del_markup = types.ReplyKeyboardRemove()
    if message.text == '–ü–∞—Ä–Ω–∏':
        gender = 'male'
    elif message.text == '–î–µ–≤—É—à–∫–∏':
        gender = 'female'
    elif message.text == '–í—Å–µ':
        gender = 'all'

    async with state.proxy() as data:
        data["find_gender"] = gender

    await message.reply(text=("–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ!"), reply_markup=del_markup)
    await ProfileStatesGroup.next()


# photo
@dp.message_handler(lambda message: not message.photo,
    state=ProfileStatesGroup.photo)
async def _photo_filter(message: types.Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. üñºÔ∏è")


@dp.message_handler(content_types=["photo"], state=ProfileStatesGroup.photo)
async def _photo(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.photo[0].file_id
    await message.reply("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å! ‚úçÔ∏è")
    await ProfileStatesGroup.next()


# name
@dp.message_handler(lambda message: len(message.text) > 70,
    state=ProfileStatesGroup.name)
async def _name_filter(message: types.Message):
    await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. ‚úÇÔ∏è")


@dp.message_handler(state=ProfileStatesGroup.name)
async def _name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text


    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç? –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞! üéÇ")
    await ProfileStatesGroup.next()


# age
@dp.message_handler(lambda message: not message.text.isdigit() or float(message.text) > 100,
    state=ProfileStatesGroup.age)
async def _age_filter(message: types.Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏. üî¢")
    


@dp.message_handler(state=ProfileStatesGroup.age)
async def _age(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["age"] = message.text

        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥. üèôÔ∏è")
        await ProfileStatesGroup.next()


# city
@dp.message_handler(lambda message: len(message.text) > 70, 
    state=ProfileStatesGroup.city,)
async def _city_filter(message: types.Message):
    await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. ‚úÇÔ∏è")


@dp.message_handler(state=ProfileStatesGroup.city)
async def _city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["city"] = message.text
        data['latitude'], data['longitude'] = get_coordinates(message.text)
    
    await message.reply("–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –¥—Ä—É–≥–∏–º –ª—É—á—à–µ —Ç–µ–±—è —É–∑–Ω–∞—Ç—å. üìù")
    await ProfileStatesGroup.next()
    


# description
@dp.message_handler(lambda message: len(message.text) > 250, 
    state=ProfileStatesGroup.desc)
async def _decription_filter(message: types.Message):
    await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ. ‚úÇÔ∏è")


@dp.message_handler(state=ProfileStatesGroup.desc)
async def _decription(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data["desc"] = message.text
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=data["photo"],
            caption=f'{data["name"]}, {data["age"]} | –ì–æ—Ä–æ–¥: {data["city"]}\n{data["desc"]}',
        )
    await ProfileStatesGroup.next()
    await create_profile(state, user_id=message.from_user.id)
    await _start_command(message)
