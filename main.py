from aiogram import Bot, Dispatcher, executor, types
from aiogram.utils.callback_data import CallbackData
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.middlewares import BaseMiddleware
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State


# –∏–º–ø–æ—Ä—Ç —Å–∫—Ä–∏–ø—Ç–æ–≤
from database import *
from app import *
from config import *
from utils import *

storage = MemoryStorage()
bot = Bot(token_api)
dp = Dispatcher(bot=bot, storage=storage)


async def start_up(_):
    await db_start()
    print(" [ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω ] ")


# —Å–ø–∏—Å–æ–∫ –∏–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class ProfileStatesGroup(StatesGroup):
    photo = State()
    name = State()
    age = State()
    city = State()
    desc = State()


class Test(BaseMiddleware):
    async def on_pre_process_update(self, update: types.update, data: dict):
        print("–î–µ–π—Å—Ç–≤–∏–µ")


# —Å—Ç–∞—Ä—Ç
@dp.message_handler(commands="start")
async def start_command(message: types.Message):
    await message.answer(
        text="–í—ã–±–µ—Ä–∏ —è–∑—ã–∫: ",
        reply_markup=start_kb(),
    )
    await message.delete()


@dp.message_handler(text=("üè≥Ô∏è–†—É—Å—Å–∫–∏–π", "üá∫üá¶–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞", "üá¨üáßEnglish"))
async def start_command(message: types.Message):
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç, —Ç–µ–ø–µ—Ä—å –¥–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ–±–µ –ø—Ä–æ—Ñ–∏–ª—å! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–∂–º–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '/create'",
        reply_markup=base_kb(),
    )
    await message.delete()
    await create_profile(user_id=message.from_user.id)


# –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
@dp.message_handler(commands="cancel", state="*")
async def com_cancel(message: types.message, state: FSMContext):
    if state is None:
        return
    await state.finish()
    await message.answer("–í—ã –≤—ã—à–ª–∏ —Å —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–∫–µ—Ç—ã.")


# —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@dp.message_handler(commands="create")
async def photo(message: types.message):
    await message.reply("–ü—Ä–∏—à–ª–∏ —Å–≤–æ–µ —Ñ–æ—Ç–æ.", reply_markup=cancel_kb())
    await ProfileStatesGroup.photo.set()


# —Ñ–æ—Ç–æ
@dp.message_handler(lambda message: not message.photo, state=ProfileStatesGroup.photo)
async def check_photo(message: types.Message):
    await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏!")


@dp.message_handler(content_types=["photo"], state=ProfileStatesGroup.photo)
async def load_photo(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data["photo"] = message.photo[0].file_id

    await message.reply("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    await ProfileStatesGroup.next()


# –∏–º—è
@dp.message_handler(
    lambda message: len(message.text) > 70,
    state=ProfileStatesGroup.name,
)
async def check_age(message: types.Message):
    await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤.")


@dp.message_handler(state=ProfileStatesGroup.name)
async def load_name(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text

    await message.reply("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await ProfileStatesGroup.next()


# –≤–æ–∑—Ä–∞—Å—Ç
@dp.message_handler(
    lambda message: not message.text.isdigit() or float(message.text) > 100,
    state=ProfileStatesGroup.age,
)
async def check_age(message: types.Message):
    if message.text != 100:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤–æ–∑—Ä–∞—Å—Ç –Ω—É–∂–Ω–æ –ø–∏—Å–∞—Ç—å —Ü–∏—Ñ—Ä–∞–º–∏.")
    elif float(message.text) > 100:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –º–µ—Ä—Ç–≤—ã, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤.")


@dp.message_handler(state=ProfileStatesGroup.age)
async def load_age(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data["age"] = message.text

        await message.reply("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥.")
        await ProfileStatesGroup.next()


# –≥–æ—Ä–æ–¥
@dp.message_handler(
    lambda message: len(message.text) > 70,
    state=ProfileStatesGroup.city,
)
async def check_age(message: types.Message):
    await message.answer("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–∏–º–≤–æ–ª–æ–≤.")


@dp.message_handler(state=ProfileStatesGroup.city)
async def load_city(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data["city"] = message.text

    await message.reply("–†–∞—Å–∫–∂–∏ –æ —Å–µ–±–µ.")
    await ProfileStatesGroup.next()


# –æ–ø–∏—Å–∞–Ω–Ω–∏–µ
@dp.message_handler(state=ProfileStatesGroup.desc)
async def load_desc(message: types.Message, state=FSMContext):
    async with state.proxy() as data:
        data["desc"] = message.text
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=data["photo"],
            caption=f'{data["name"]}, {data["age"]} | –ì–æ—Ä–æ–¥: {data["city"]}\n{data["desc"]}',
        )
    await edit_profile(state, user_id=message.from_user.id)
    await message.reply("–ù—É —Ç—ã –∏ —É—Ä–æ–¥ —Å—É–∫–∞–∞–∞–∞–∞.")
    await ProfileStatesGroup.next()


# —Å—Ç–∞—Ä—Ç —Å–∫—Ä–∏–ø—Ç–∞
if __name__ == "__main__":
    dp.middleware.setup(Test())
    executor.start_polling(
        dp,
        on_startup=start_up,
        skip_updates=True,
    )
